import sqlite3
import random
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('casino.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        balance INTEGER,
        daily_streak INTEGER
    )''')
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_or_create_user(user_id, username):
    conn = sqlite3.connect('casino.db')
    c = conn.cursor()
    c.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = c.fetchone()
    if not user:
        c.execute('INSERT INTO users (user_id, username, balance, daily_streak) VALUES (?, ?, ?, ?)',
                  (user_id, username, 1000, 0))
        conn.commit()
        user = (user_id, username, 1000, 0)
    conn.close()
    return user

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
def update_balance(user_id, amount):
    conn = sqlite3.connect('casino.db')
    c = conn.cursor()
    c.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤
def get_leaderboard():
    conn = sqlite3.connect('casino.db')
    c = conn.cursor()
    c.execute('SELECT username, balance FROM users ORDER BY balance DESC LIMIT 10')
    leaders = c.fetchall()
    conn.close()
    return leaders

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():
    keyboard = [
        [InlineKeyboardButton("üé∞ –°–ª–æ—Ç—ã", callback_data='slots'),
         InlineKeyboardButton("üé≤ –ö–æ—Å—Ç–∏", callback_data='dice')],
        [InlineKeyboardButton("‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data='quiz'),
         InlineKeyboardButton("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", callback_data='bonus')],
        [InlineKeyboardButton("üèÜ –õ–∏–¥–µ—Ä—ã", callback_data='leaderboard'),
         InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data='balance')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    get_or_create_user(user.id, user.username or "Anonymous")
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FunCasino, {user.first_name}! üéâ\n"
        "–¢—ã –ø–æ–ª—É—á–∏–ª 1000 FunCoins –¥–ª—è –∏–≥—Ä—ã. –í—ã–±–∏—Ä–∞–π, –≤–æ —á—Ç–æ —Å—ã–≥—Ä–∞—Ç—å!",
        reply_markup=main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    await query.answer()

    user_data = get_or_create_user(user.id, user.username or "Anonymous")
    balance = user_data[2]

    if query.data == 'balance':
        await query.message.reply_text(f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance} FunCoins üí∞", reply_markup=main_menu())
    
    elif query.data == 'bonus':
        update_balance(user.id, 100)
        await query.message.reply_text("–¢—ã –ø–æ–ª—É—á–∏–ª 100 FunCoins –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥! üéÅ", reply_markup=main_menu())
    
    elif query.data == 'leaderboard':
        leaders = get_leaderboard()
        text = "üèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:\n"
        for i, (username, bal) in enumerate(leaders, 1):
            text += f"{i}. {username}: {bal} FunCoins\n"
        await query.message.reply_text(text, reply_markup=main_menu())
    
    elif query.data == 'slots':
        if balance < 50:
            await query.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ FunCoins! –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–∞–º–∏.", reply_markup=main_menu())
            return
        update_balance(user.id, -50)
        result = [random.choice(['üçí', 'üçã', '‚≠ê']) for _ in range(3)]
        win = result[0] == result[1] == result[2]
        prize = 200 if win else 0
        if win:
            update_balance(user.id, prize)
        text = f"üé∞ {result[0]} | {result[1]} | {result[2]}\n"
        text += f"{'–ü–æ–±–µ–¥–∞! +200 FunCoins!' if win else '–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!'}\n"
        text += f"–ë–∞–ª–∞–Ω—Å: {balance - 50 + prize} FunCoins"
        await query.message.reply_text(text, reply_markup=main_menu())
    
    elif query.data == 'dice':
        if balance < 50:
            await query.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ FunCoins! –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–∞–º–∏.", reply_markup=main_menu())
            return
        update_balance(user.id, -50)
        player = random.randint(1, 6)
        bot = random.randint(1, 6)
        win = player > bot
        prize = 100 if win else 0
        if win:
            update_balance(user.id, prize)
        text = f"üé≤ –¢—ã: {player} | –ë–æ—Ç: {bot}\n"
        text += f"{'–ü–æ–±–µ–¥–∞! +100 FunCoins!' if win else '–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!'}\n"
        text += f"–ë–∞–ª–∞–Ω—Å: {balance - 50 + prize} FunCoins"
        await query.message.reply_text(text, reply_markup=main_menu())
    
    elif query.data == 'quiz':
        questions = [
            {"q": "–ö–∞–∫–æ–π —Ñ—Ä—É–∫—Ç –Ω–∞ —Å–ª–æ—Ç–∞—Ö —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π?", "a": ["üçí –í–∏—à–Ω—è", "üçã –õ–∏–º–æ–Ω", "üçé –Ø–±–ª–æ–∫–æ"], "correct": 0}
        ]
        q = questions[0]
        keyboard = [[InlineKeyboardButton(a, callback_data=f'quiz_{i}')] for i, a in enumerate(q["a"])]
        await query.message.reply_text(q["q"], reply_markup=InlineKeyboardMarkup(keyboard))
    
    elif query.data.startswith('quiz_'):
        answer = int(query.data.split('_')[1])
        prize = 50 if answer == 0 else 0
        update_balance(user.id, prize)
        text = f"{'–ü—Ä–∞–≤–∏–ª—å–Ω–æ! +50 FunCoins!' if prize else '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!'}\n"
        text += f"–ë–∞–ª–∞–Ω—Å: {balance + prize} FunCoins"
        await query.message.reply_text(text, reply_markup=main_menu())

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    init_db()
    token = os.getenv("7696218265:AAGOiJEmkg2Wo8qL32ZQwfk2i3A3sbwbNEE")
    if not token:
        raise ValueError("BOT_TOKEN not set in environment variables")
    app = Application.builder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    await app.initialize()
    await app.start()
    await app.updater.start_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
